---
name: PHPUnit Action
author: discoverygarden
description: Runs configured PHPUnit Tests implemented in called repository.

inputs:
  composer-auth:
    description: 'Composer auth token necessary for accessing our composer project.'
    required: false
  composer_package:
    description: "Composer project reference. (ex. discoverygarden/dgi_group) it's only necessary to provide this if the composer package differs from the repository name."
    required: false
    default: "${{ github.repository }}"
  drupal_extension:
    description: "The module name for enabling within drupal. (Ex. discoverygarden/module would be `module`). It's only necessary to provide this if the module name differs from the repository name."
    required: false
    default: "${{ github.event.repository.name }}"
  composer_patches:
    description: 'Additional composer patches that might be necessary to run the workflow.'
    required: false
  composer_package_prerequisites:
    description: 'require-dev modules required for the module.'
    required: false
  drupal_root:
    description: 'The root drupal directory. (Default: /opt/drupal)'
    default: /opt/drupal
  drupal_web_root:
    description: 'The drupal web root directory. (Default: /opt/drupal/web)'
    default: /opt/drupal/web
  postgres_db:
    description: 'The postgres database name. (Default: drupal)'
    default: drupal
  postgres_user:
    description: 'The postgres database user. (Default: drupal)'
    default: drupal
  postgres_password:
    description: 'The postgress database user password. (Default: drupal)'
    default: drupal
  apache_user:
    description: 'The apache user. (Default: www-data)'
    default: www-data
  apache_user_group:
    description: 'The apache user group. (Default: www-data)'
    default: www-data
  drupal-version:
    description: 'The version of Drupal under which to run, if we need to know it.'
    default: "${{ matrix.drupal-version }}"
  experimental:
    type: boolean
    description: 'If the execution should be permissive of errors.'
    default: "${{ matrix.experimental }}"
  drush-spec:
    description: 'Composer spec for acquiring drush.'
    default: 'drush/drush'
  do-leniency:
    default: true
  lenient-packages:
    default: '[]'

runs:
  using: "composite"
  steps:
    - name: Grab additional packages
      run: |
        echo "::group::Installing drupal and composer"
        # postgresql-client required for drush's site installation process
        # git required to grab repo as repo via actions/checkout
        apt update
        apt install -y postgresql-client git unzip jq
      shell: bash
    - name: Checkout Repo
      uses: actions/checkout@v3
    - name: Misc setup
      working-directory: ${{ inputs.drupal_root }}
      run: |
        set -eux
        # XXX: When running inside a container, it skips the entry point,
        # so... let's kick off the Apache process.
        apache2ctl start

        # Configure access and install our module.
        if [ -n "${{ inputs.composer-auth }}" ] ; then
          echo '${{ inputs.composer-auth }}' > auth.json
        fi

        # Setup our repos.
        # XXX: We don't want the default Drupal thing first (it'll be readded
        # later).
        composer config --unset repositories.0
        # We need to specify things in the _opposite_ order than what we want.
        # XXX: Some repos are in an odd state, between different repos... so
        # let's throw 'em in.
        composer config --json -- repositories.islandora \
          '{"type": "git", "url": "https://github.com/Islandora/islandora.git"}'
        composer config --json -- repositories.drupal \
          '{"type": "composer", "url": "https://packages.drupal.org/8", "canonical": false}'
        # Configure access, and add our private packagist, if relevant.
        if [ -n "${{ inputs.composer-auth }}" ] ; then
          echo '${{ inputs.composer-auth }}' > auth.json
          composer config --json -- repositories.private_packagist \
            '{"type": "composer", "url": "https://repo.packagist.com/discoverygarden/", "canonical": false}'
        fi
        composer config --json -- repositories.actions \
          "{\"type\": \"path\", \"url\": \"$GITHUB_WORKSPACE\"}"
        if [ -n "${{ inputs.composer-auth }}" ] ; then
          composer config -- repo.packagist false
        fi

        # Dump out the configured repositories.
        composer config repositories
        if [ -n '${{ env.COMPOSER_PATCHES }}' ] ; then
          composer config -- allow-plugins.cweagans/composer-patches true
          if [ -n '${{ env.ADDITIONAL_COMPOSER_PATCHES }}' ] ; then
            echo '${{ env.COMPOSER_PATCHES }}' > patches.json
            echo '${{ env.ADDITIONAL_COMPOSER_PATCHES }}' > additional_patches.json
            composer config --json --merge -- extra.patches "$(jq -s '.[0] * .[1]' patches.json additional_patches.json)"
          else
            composer config --json --merge -- extra.patches '${{ env.COMPOSER_PATCHES }}'
          fi
          composer require "cweagans/composer-patches:^1.7"
        fi
        composer config minimum-stability dev

        # Leniency for Drupal versions...
        if [ '${{ inputs.do-leniency }}' = 'true' ] ; then
          echo "Doing the lenient thing."
          composer config --no-plugins allow-plugins.mglaman/composer-drupal-lenient true
          composer config --merge --json extra.drupal-lenient.allowed-list '${LENIENT_PACKAGES:-${{ inputs.lenient-packages.default }}}'
          composer require "mglaman/composer-drupal-lenient"
        else
          echo "Not doing the lenient thing."
        fi

        composer require --update-with-all-dependencies ${{ env.COMPOSER_PACKAGE_PREREQUISITES }} ${{ env.ADDITIONAL_COMPOSER_PACKAGE_PREREQUISITES }} \
          "${{ inputs.composer_package }}:dev-${{ github.base_ref }}#${{ github.sha }}"

        # XXX: Trying to run PHPUnit complains w/o prophecy-phpunit:
        # > Drupal requires Prophecy PhpUnit when using PHPUnit 9 or greater.
        # > Please use 'composer require --dev phpspec/prophecy-phpunit:^2' to
        # > ensure that it is present.
        # ... so let's add it as well...

        composer require --dev --update-with-all-dependencies "drupal/core-dev:^${{ inputs.drupal-version }}" phpspec/prophecy-phpunit:^2

        # Install Drush.
        composer require --update-with-all-dependencies ${{ inputs.drush-spec }}

        # Install the site.
        drush --uri=http://localhost --yes -v site:install minimal --db-url="pgsql://${{ inputs.postgres_user }}:${{ inputs.postgres_password }}@postgres/${{ inputs.postgres_db}}"

        # Install the module.
        drush --uri=http://localhost --yes -v en ${{ inputs.drupal_extension }}
        chown -R $APACHE_USER:$APACHE_GROUP web/sites web/modules web/themes
        echo "::endgroup::"
      env:
        # XXX: Installation of the module is presently a little funky...
        # "require-dev" doesn't quite do the trick, as it's only usable at the
        # root-project level.
        COMPOSER_PACKAGE_PREREQUISITES: >-
          "drupal/test_support:^1"
          "discoverygarden/islandora_test_support:^1"
        ADDITIONAL_COMPOSER_PACKAGE_PREREQUISITES: ${{ inputs.composer_package_prerequisites }}
        # Patches need to be publically accessible, presently (so no private PRs,
        # at present).
        COMPOSER_PATCHES: |-
          {
            "drupal/core": {
              "Referencable unpublished nodes": "https://www.drupal.org/files/issues/2022-06-17/2845144-67.patch"
            },
            "drupal/migrate_directory": {
              "Custom iterator for memory optimization": "https://www.drupal.org/files/issues/2023-03-03/3344946-iterator.patch"
            }
          }
        ADDITIONAL_COMPOSER_PATCHES: ${{ inputs.composer_patches }}
        APACHE_USER: ${{ inputs.apache_user }}
        APACHE_GROUP: ${{ inputs.apache_group }}
        LENIENT_PACKAGES: ${{ inputs.lenient-packages }}
      shell: bash
      continue-on-error: ${{ fromJSON(inputs.experimental) }}
    - name: Run PHPUnit tests (base)
      env:
        SIMPLETEST_BASE_URL: http://127.0.0.1
        SIMPLETEST_DB: "pgsql://${{ inputs.postgres_user }}:${{ inputs.postgres_password }}@postgres/${{ inputs.postgres_db}}"
        APACHE_USER: ${{ inputs.apache_user }}
        DRUPAL_WEB_ROOT: ${{ inputs.drupal_web_root }}
      working-directory: ${{ inputs.drupal_root }}
      continue-on-error: ${{ fromJSON(inputs.experimental) }}
      run: |
        echo "::group::Run PHPUnit tests (base)"
        su "$APACHE_USER" -s /bin/bash <<-EOS
        phpunit "--bootstrap=$DRUPAL_WEB_ROOT/core/tests/bootstrap.php" --group ${{ inputs.drupal_extension }} --verbose "$GITHUB_WORKSPACE"
        EOS
        echo "::endgroup::"
      shell: bash
    - name: Run PHPUnit tests (reporting deprecations)
      env:
        SIMPLETEST_BASE_URL: http://127.0.0.1
        SIMPLETEST_DB: "pgsql://${{ inputs.postgres_user }}:${{ inputs.postgres_password }}@postgres/${{ inputs.postgres_db}}"
        APACHE_USER: ${{ inputs.apache_user }}
        DRUPAL_WEB_ROOT: ${{ inputs.drupal_web_root }}
      working-directory: ${{ inputs.drupal_root }}
      # XXX: A number of deprecation things in modules pulled in make a mess
      # presently... so let's just report 'em, for now.
      continue-on-error: true
      run: |
        echo "::group::Run PHPUnit tests (reporting deprecations)"
        su "$APACHE_USER" -s /bin/bash <<-EOS
        phpunit "--configuration=$DRUPAL_WEB_ROOT/core/phpunit.xml.dist" --group ${{ inputs.drupal_extension }} --verbose "$GITHUB_WORKSPACE"
        EOS
        echo "::endgroup::"
      shell: bash
